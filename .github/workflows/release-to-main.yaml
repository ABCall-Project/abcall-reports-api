name: Release
on:
    pull_request:
      types:
        - closed
jobs:
  tests:
    name: Tests
    if: success() && github.event.pull_request.merged == true && github.head_ref == 'develop'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout de repositorio
      uses: actions/checkout@v2
    - name: Environment configuration
      uses: actions/setup-python@v2
      with:
          python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install -r requirements.txt
    - name: Running tests 🧪
      id: test-running-id
      run: |
        make run-tests
      env:
        FLASK_ENV: test
    - name: Validate results with errors
      if: ${{ failure() }}
      env:
        ERROR_MESSAGE: One or various test failed 🔴
      run: echo "::set-output name=answer::${ERROR_MESSAGE}"
    - name: Validate result without errors
      if: ${{ success() }}
      env:
        MESSAGE_SUCCESS: All the tests were success
      run: echo "::set-output name=answer::${MESSAGE_SUCCESS}"
    - name: Coverage calculation 📊
      id: Coverage
      run: |
        make run-tests-coverage

  deploy:
    name: Deploy 🚀
    environment: production
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set environment variables
        env:
          ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
          ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
          ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          CONNECTION_STRING_STORAGE: ${{ secrets.CONNECTION_STRING_STORAGE }}
        run: |
          echo "Environment variables are set"
        
      - name: Log in to ACR
        run: |
          echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ secrets.ACR_LOGIN_SERVER }} \
          -u ${{ secrets.ACR_USERNAME }} --password-stdin
      
      - name: Build and push Docker image 🐳 ⚙️
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/abcall-reports-api:build-$GITHUB_RUN_NUMBER .
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/abcall-reports-api:build-$GITHUB_RUN_NUMBER
      
      - name: Set AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name abcall-cluster-east-us

      - name: Deploy to AKS 🚀
        run: |
          CONNECTION_STRING_STORAGE="${{ secrets.CONNECTION_STRING_STORAGE }}"
          sed "s/{{IMAGE_TAG}}/build-${GITHUB_RUN_NUMBER}/g" ./kubernetes/k8s-deployment.tmpl > kubernetes/new-k8s-deployment.yaml
          sed -e "s|{{CONNECTION_STRING_STORAGE}}|${CONNECTION_STRING_STORAGE}|g" \
          ./kubernetes/k8s-secrets.tmpl > kubernetes/k8s-secrets.yaml
          kubectl apply -f kubernetes/k8s-secrets.yaml
          kubectl apply -f kubernetes/k8s-configMap.yaml
          kubectl apply -f kubernetes/new-k8s-deployment.yaml
          kubectl apply -f kubernetes/k8s-hpa.yaml